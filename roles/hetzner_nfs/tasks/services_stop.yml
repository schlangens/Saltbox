#########################################################################
# Title:         Saltbox: Stop Services Task                            #
# Author(s):     l3uddz, desimaniac                                     #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check to see if docker is installed
  ansible.builtin.stat:
    path: "/usr/bin/docker"
  register: docker_binary

- name: Populate Service Facts
  ansible.builtin.service_facts:
  when: docker_binary.stat.exists

- name: Get 'docker.service' state
  ansible.builtin.set_fact:
    docker_service_running: "{{ (services['docker.service'] is defined) and (services['docker.service']['state'] == 'running') }}"
  when: docker_binary.stat.exists

- name: Gather list of running Docker containers
  ansible.builtin.shell: "docker ps --format '{{ '{{' }} .Names{{ '}}' }}' | xargs echo -n"
  register: docker_running_containers
  ignore_errors: true
  when: docker_binary.stat.exists and docker_service_running

- name: Stop all running Docker containers
  ansible.builtin.shell: "docker stop {{ docker_running_containers.stdout }}"
  ignore_errors: true
  when: docker_binary.stat.exists and docker_service_running and not (docker_running_containers.stdout | trim | length == 0)

- name: Wait for 10 seconds before commencing
  ansible.builtin.wait_for:
    timeout: 10
  when: docker_binary.stat.exists and docker_service_running and not (docker_running_containers.stdout | trim | length == 0)

- name: Check if '{{ mergerfs_service_name }}' exists
  ansible.builtin.stat:
    path: "/etc/systemd/system/{{ mergerfs_service_name }}"
  register: mergerfs_service

- name: Populate Service Facts
  ansible.builtin.service_facts:
  when: mergerfs_service.stat.exists

- name: Get '{{ mergerfs_service_name }}' state
  ansible.builtin.set_fact:
    mergerfs_service_running: "{{ (services[mergerfs_service_name] is defined) and (services[mergerfs_service_name]['state'] == 'running') }}"
  when: mergerfs_service.stat.exists

- name: Stop existing '{{ mergerfs_service_name }}'
  ansible.builtin.systemd_service:
    state: stopped
    name: "{{ mergerfs_service_name }}"
  when: mergerfs_service.stat.exists and mergerfs_service_running

- name: 'Force unmount remotes'
  ansible.builtin.shell: '/bin/umount -f {{ item }} 2>/dev/null || :'
  with_items:
    - "/mnt/unionfs"
    - "/mnt/feeder"
  ignore_errors: true
