##########################################################################
# Title:         Saltbox: Arr DB Role | Arr Tasks                        #
# Author(s):     salty                                                   #
# URL:           https://github.com/saltyorg/Saltbox                     #
# --                                                                     #
##########################################################################
#                   GNU General Public License v3.0                      #
##########################################################################
---
- name: "{{ arr_type | capitalize }} | Check if '{{ arr_path_main_db | basename }}' exists"
  ansible.builtin.stat:
    path: "{{ arr_path_main_db }}"
  register: arr_db

- name: "{{ arr_type | capitalize }} | Check if '{{ arr_path_logs_db | basename }}' exists"
  ansible.builtin.stat:
    path: "{{ arr_path_logs_db }}"
  register: arr_logs_db

- name: "{{ arr_type | capitalize }} | Fail if database does not exist"
  ansible.builtin.fail:
    msg: "{{ arr_type | capitalize }} databases are not present for {{ lookup('vars', arr_type + '_name') }} instance"
  when: (not (arr_db.stat.exists and arr_logs_db.stat.exists))

- name: "{{ arr_type | capitalize }} | Stop Docker container"
  ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/stop_docker_container.yml"
  vars:
    var_prefix: "{{ arr_type }}"

- name: "{{ arr_type | capitalize }} | Check if main database passes integrity_check"
  ansible.builtin.shell: "sqlite3 '{{ arr_path_main_db }}' 'PRAGMA integrity_check(1)'"
  register: arr_db_integrity_check
  failed_when: (arr_db_integrity_check.stdout != 'ok')

- name: "{{ arr_type | capitalize }} | Check if blobs database passes integrity_check"
  ansible.builtin.shell: "sqlite3 '{{ arr_path_logs_db }}' 'PRAGMA integrity_check(1)'"
  register: arr_logs_db_integrity_check
  failed_when: (arr_logs_db_integrity_check.stdout != 'ok')

- name: "{{ arr_type | capitalize }} | Database tasks"
  block:
    - name: "{{ arr_type | capitalize }} | Create backup directory"
      ansible.builtin.file:
        path: "/tmp/{{ lookup('vars', arr_type + '_name') }}_backup"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"

    - name: "{{ arr_type | capitalize }} | Backup databases"
      ansible.builtin.shell: "cp '{{ lookup('vars', arr_type + '_paths_location') }}/{{ item }}' /tmp/{{ lookup('vars', arr_type + '_name') }}_backup/"
      loop: "{{ arr_db_files }}"

    - name: "{{ arr_type | capitalize }} | Vacuum '{{ arr_path_main_db | basename }}' database"
      ansible.builtin.shell: "sqlite3 '{{ arr_path_main_db }}' 'VACUUM;'"
      register: arr_db_vacuum
      failed_when: (arr_db_vacuum.rc != 0)

    - name: "{{ arr_type | capitalize }} | Vacuum '{{ arr_path_logs_db | basename }}' database"
      ansible.builtin.shell: "sqlite3 '{{ arr_path_logs_db }}' 'VACUUM;'"
      register: arr_logs_db_vacuum
      failed_when: (arr_logs_db_vacuum.rc != 0)

    - name: "{{ arr_type | capitalize }} | Reindex '{{ arr_path_main_db | basename }}' database"
      ansible.builtin.shell: "sqlite3 '{{ arr_path_main_db }}' 'REINDEX;'"
      register: arr_db_reindex
      failed_when: (arr_db_reindex.rc != 0)

    - name: "{{ arr_type | capitalize }} | Reindex '{{ arr_path_logs_db | basename }}' database"
      ansible.builtin.shell: "sqlite3 '{{ arr_path_logs_db }}' 'REINDEX;'"
      register: arr_logs_db_reindex
      failed_when: (arr_logs_db_reindex.rc != 0)

  rescue:
    - name: "{{ arr_type | capitalize }} | Delete wal and shm files"
      ansible.builtin.file:
        path: "{{ lookup('vars', arr_type + '_paths_location') }}/{{ item }}"
        state: absent
      with_items: "{{ arr_db_temp_files }}"

    - name: "{{ arr_type | capitalize }} | Restore database backup"
      ansible.builtin.shell: "cp -f '/tmp/{{ lookup('vars', arr_type + '_name') }}_backup/{{ item }}' '{{ lookup('vars', arr_type + '_paths_location') }}/{{ item }}'"
      loop: "{{ arr_db_files }}"

- name: "{{ arr_type | capitalize }} | Start Docker container"
  ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/start_docker_container.yml"
  vars:
    var_prefix: "{{ arr_type }}"

- name: "{{ arr_type | capitalize }} | Delete backup directory"
  ansible.builtin.file:
    path: "/tmp/{{ lookup('vars', arr_type + '_name') }}_backup"
    state: absent
