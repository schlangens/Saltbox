#########################################################################
# Title:         Saltbox: Remote Role                                   #
# Author(s):     desimaniac, salty                                      #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Import Rclone Role
  ansible.builtin.include_role:
    name: rclone
  when: use_remote and ('mounts' in ansible_run_tags) and remote_update_rclone

- name: Check to see if docker is installed
  ansible.builtin.stat:
    path: "/usr/bin/docker"
  register: remote_docker_binary

- name: Populate Service Facts
  ansible.builtin.service_facts:

- name: Get Docker service state
  ansible.builtin.set_fact:
    remote_docker_service_running: "{{ (services['docker.service'] is defined) and (services['docker.service']['state'] == 'running') }}"
  when: remote_docker_binary.stat.exists

- name: Tasks for when Docker exists and is running
  when: remote_docker_binary.stat.exists and remote_docker_service_running
  block:
    - name: "Gather list of running Docker containers"
      ansible.builtin.shell: "docker ps --format '{{ '{{' }} .Names{{ '}}' }}' --filter label=com.github.saltbox.saltbox_managed=true | xargs echo -n"
      register: saltbox_managed_containers
      ignore_errors: true

    - name: "Set 'containers_list' variable"
      ansible.builtin.set_fact:
        containers_list: "{{ saltbox_managed_containers.stdout }}"

    - name: "Stop all running Docker containers"
      ansible.builtin.shell: "docker stop {{ containers_list }}"
      ignore_errors: true
      when: (containers_list | trim | length > 0)

    - name: Stop docker service
      ansible.builtin.systemd_service:
        name: docker
        state: stopped

- name: "Check if 'rclone_vfs.service' exists"
  ansible.builtin.stat:
    path: "/etc/systemd/system/rclone_vfs.service"
  register: rclone_vfs_status

- name: "Tasks for 'rclone_vfs.service'"
  when: rclone_vfs_status.stat.exists
  block:
    - name: "Create services folder."
      ansible.builtin.file:
        path: "/opt/services"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"
        recurse: true

    - name: "Synchronize '/etc/systemd/system' to '/opt/services'"
      ansible.builtin.shell: |
        /usr/bin/rsync \
          --delay-updates \
          -F \
          --compress \
          --archive \
          --no-recursive \
          --no-links \
          --no-perms \
          --exclude='saltbox_managed_*' \
          --include='*.service' \
          --include='*.mount' \
          /etc/systemd/system/* /opt/services/
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: "Reset permissions of folders"
      ansible.builtin.file:
        path: "/opt/services"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"
        recurse: true

    - name: "Stop and disable existing 'rclone_vfs.service'"
      ansible.builtin.systemd_service:
        name: "rclone_vfs.service"
        state: stopped
        enabled: false
      ignore_errors: true

    - name: Delete 'rclone_vfs.service'
      ansible.builtin.file:
        path: "/etc/systemd/system/rclone_vfs.service"
        state: absent

- name: "Check if 'rclone_refresh.service' exists"
  ansible.builtin.stat:
    path: "/etc/systemd/system/rclone_refresh.service"
  register: rclone_refresh_status

- name: "Tasks for 'rclone_refresh.service'"
  when: rclone_refresh_status.stat.exists
  block:
    - name: "Stop and disable existing 'rclone_refresh.service'"
      ansible.builtin.systemd_service:
        name: "rclone_refresh.service"
        state: stopped
        enabled: false
      ignore_errors: true

    - name: "Stop and disable existing 'rclone_refresh.timer'"
      ansible.builtin.systemd_service:
        name: "rclone_refresh.timer"
        state: stopped
        enabled: false
      ignore_errors: true

    - name: Delete 'rclone_refresh' services
      ansible.builtin.file:
        path: "/etc/systemd/system/{{ item }}"
        state: absent
      loop:
        - "rclone_refresh.service"
        - "rclone_refresh.timer"

- name: Run systemd daemon-reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: Wait for 10 seconds
  ansible.builtin.wait_for:
    timeout: 10

- name: Populate Service Facts
  ansible.builtin.service_facts:

- name: Get list of existing remote services
  ansible.builtin.set_fact:
    saltbox_managed_rclone_services: "{{ (saltbox_managed_rclone_services | default([])) + [rclone_service.key] }}"
  loop: "{{ services | dict2items }}"
  loop_control:
    loop_var: rclone_service
  when: (rclone_service_template in rclone_service.key) and (rclone_service.value.status != 'not-found')

- name: Cleanup Tasks
  ansible.builtin.include_tasks: "cleanup.yml"
  with_items: "{{ saltbox_managed_rclone_services }}"
  when: (saltbox_managed_rclone_services is defined) and (saltbox_managed_rclone_services | length > 0) and (not 'refresh' in item)

- name: Create '/mnt/remote' directory
  ansible.builtin.file:
    path: "/mnt/remote"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0775"

- name: Remote Enabled Block
  when: use_remote
  block:
    - name: Remote Tasks
      ansible.builtin.include_tasks: "remote.yml"
      with_items: "{{ rclone.remotes }}"
      when: rclone_remote_is_defined and item.settings.template != "nfs" and item.settings.mount

    - name: Remote Tasks (NFS)
      ansible.builtin.include_tasks: "nfs.yml"
      with_items: "{{ rclone.remotes }}"
      when: rclone_remote_is_defined and item.settings.template == "nfs" and item.settings.mount
