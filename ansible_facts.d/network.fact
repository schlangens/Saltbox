#!/srv/ansible/venv/bin/python3

import requests
import json
import ipaddress
import subprocess

urls = {
    "ipv4_primary": "https://ipify.saltbox.dev",
    "ipv4_fallback": "https://ipv4.icanhazip.com",
    "ipv6_primary": "https://ipify6.saltbox.dev",
    "ipv6_fallback": "https://ipv6.icanhazip.com",
}

MAX_RETRIES = 3
TIMEOUT = 3  # in seconds

def has_valid_ipv6():
    try:
        # Check for global IPv6 addresses (exclude link-local which start with 'fe80')
        output = subprocess.check_output(
            ["ip", "-6", "addr", "show", "scope", "global"]
        ).decode()

        # If output is non-empty, global IPv6 addresses are present
        if output.strip():
            return True, None
        else:
            return False, None

    except subprocess.CalledProcessError as e:
        # Handle the specific subprocess error
        return False, f"Subprocess error during IPv6 check: {e}"
    except Exception as e:
        # Handle any other exceptions
        return False, f"General error during IPv6 check: {e}"


def validate_ip(ip, version):
    try:
        if version == "ipv4":
            ipaddress.IPv4Address(ip)
        else:
            ipaddress.IPv6Address(ip)
        return True
    except ipaddress.AddressValueError:
        return False

def get_ip(url, version):
    retries = 0
    error = None

    while retries < MAX_RETRIES:
        try:
            response = requests.get(url, timeout=TIMEOUT)
            if response.status_code == 200:
                ip = response.text.strip()
                if validate_ip(ip, version):
                    return ip, None, False  # IP, error message, failed status
                else:
                    error = f"Invalid {version} address received."
            else:
                error = f"HTTP {response.status_code} received from {url}."

        except requests.RequestException as e:
            error = str(e)
        retries += 1

    return None, error, True  # IP, error message, failed status

data = {
    "ip": {
        "public_ip": "",
        "public_ipv6": "",
        "error_ipv4": None,
        "error_ipv6": None,
        "failed_ipv4": False,
        "failed_ipv6": False,
        "ipv6_check_error": None  # Add field for IPv6 check error
    }
}

public_ip, error_v4, failed_v4 = get_ip(urls["ipv4_primary"], "ipv4")
if not public_ip:
    public_ip, error_v4, failed_v4 = get_ip(urls["ipv4_fallback"], "ipv4")

ipv6_present, ipv6_error = has_valid_ipv6()
if ipv6_present:
    public_ipv6, error_v6, failed_v6 = get_ip(urls["ipv6_primary"], "ipv6")
    if not public_ipv6:
        public_ipv6, error_v6, failed_v6 = get_ip(urls["ipv6_fallback"], "ipv6")
    data["ip"]["public_ipv6"] = public_ipv6 or ""
    data["ip"]["error_ipv6"] = error_v6
    data["ip"]["failed_ipv6"] = failed_v6
else:
    data["ip"]["ipv6_check_error"] = ipv6_error  # Store the IPv6 check error

data["ip"]["public_ip"] = public_ip or ""
data["ip"]["error_ipv4"] = error_v4
data["ip"]["failed_ipv4"] = failed_v4

print(json.dumps(data, indent=4))
